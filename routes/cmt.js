const express = require("express");
const CMTconfig = require("../models/cmtConfig");
const router = express.Router();

/* This method will take all the 
information ragrding 
application , it will return appId as unique key for app/env
remember currentConfig will always be replaced by UI 
and history config will be pushed as audit record 
{
id: application id per env generated by API and required for future edits.
applicationName: pop
idToken: send by ui and will use it for auth
env: ftr/qa/prod
createdBy: ngupta
historyConfig: [] // this will be generated by api and Ui will need it for rollback
currentConfig: {
// this will be raw json
}
}
createdAt : this will be generated by API
*/

router.post("/save", async (req, res) => {
  // this is the save request so unique document will
  // be created.
  // make sure historyConfiguration are saved
  // make sure all the priorites are also set
  const dbObject = {
    applicationName: req.body.applicationName,
    env: req.body.env,
    createdBy: req.body.createdBy,
    historyConfig: [req.body.currentConfig],
    currentConfig: req.body.currentConfig,
    lastUpdatedBy: req.body.createdBy,
    lastUpdatedAt: new Date(),
    createdAt: new Date()
  };
  const cmt = new CMTconfig(dbObject);
  const response = await cmt.save();

  res.send(response);
});

/* This will be the get request to get the configuration based on 
per app/env */
router.get("/get-config", async (req, res) => {
  try {
    if (!req.query.applicationName || !req.query.env) {
      throw new Error("Application name or env is not configured");
    }
    const response = await CMTconfig.find({
      $and: [
        { applicationName: req.query.applicationName },
        { env: req.query.env },
      ],
    });
    res.send(response);
  } catch (e) {
    res.send({ error: e.message });
  }
});

/* This end point will be used to rollback the config to certain point
per app/env */
router.post("/rollback-config", async (req, res) => {
  try {
    if (!req.body.lastUpdatedBy || !req.body._id || !req.body.applicationName || !req.body.env) {
      throw new Error("Application name /id/createdBy or env is not configured");
    }
    const response = await CMTconfig.findOne({
      $and: [
        { applicationName: req.body.applicationName },
        { env: req.body.env },
        {_id:req.body._id}
      ],
    });
    
    if (response) {
      // application exists now update the configuration
      let {historyConfig} = response;
      historyConfig.push(req.body.currentConfig);
      const dbObject = {  
        historyConfig: historyConfig,
        currentConfig: req.body.currentConfig,
        lastUpdatedBy: req.body.lastUpdatedBy,
        lastUpdatedAt: new Date(),
      };
      console.log(dbObject);
      const updateResponse = await CMTconfig.findByIdAndUpdate(req.body._id,
        dbObject
      );
      
      res.send(updateResponse);
    } else {
      throw new Error("Application does not exists");
    }
  } catch (e) {
    console.log(e);
    res.send({ error: e.message });
  }
});
module.exports = router;
